=begin
#Capture the Flag

#A friendly game of Capture the Flag

The version of the OpenAPI document: 1.0.0
Contact: hello@testdouble.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module GameClient
  class GameApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Player
    # Get player information
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def get_player(opts = {})
      data, _status_code, _headers = get_player_with_http_info(opts)
      data
    end

    # Get Player
    # Get player information
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def get_player_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GameApi.get_player ...'
      end
      # resource path
      local_var_path = '/player'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse202' 

      # auth_names
      auth_names = opts[:auth_names] || ['token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GameApi#get_player\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Move
    # Create a player move
    # @param direction [String] The direction to move
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse202]
    def post_moves(direction, opts = {})
      data, _status_code, _headers = post_moves_with_http_info(direction, opts)
      data
    end

    # Create Move
    # Create a player move
    # @param direction [String] The direction to move
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def post_moves_with_http_info(direction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GameApi.post_moves ...'
      end
      # verify the required parameter 'direction' is set
      if @api_client.config.client_side_validation && direction.nil?
        fail ArgumentError, "Missing the required parameter 'direction' when calling GameApi.post_moves"
      end
      # verify enum value
      allowable_values = ["north", "east", "west", "south"]
      if @api_client.config.client_side_validation && !allowable_values.include?(direction)
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/moves'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'direction'] = direction

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse202' 

      # auth_names
      auth_names = opts[:auth_names] || ['token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GameApi#post_moves\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
